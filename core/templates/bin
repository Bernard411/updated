  <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Health Records</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f8f9fa;
                margin: 0;
                padding: 20px;
            }
            .container {
              
                margin: auto;
               
            }
            .record-card {
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                padding: 20px;
                margin-bottom: 20px;
                background-color: #fff;
                border-radius: 8px;
            }
            .record-card h5 {
                font-weight: bold;
                margin-bottom: 10px;
                font-size: large;
            }
            .record-card p {
                margin: 5px 0;
                font-size: small;

            }
            .record-card p span {
                font-weight: bold;
                font-size: small;
            }
        </style>
    </head>
    <body>
        <div class="container">
            
            {% for record in records %}
                <div class="record-card">
                    <h5>Record Date: {{ record.record_date }}</h5>
                    <p><span>Description:</span> 
                        {% if record.description|length > 20 %}
                            {{ record.description|slice:":10" }}...
                        {% else %}
                            {{ record.description }}
                        {% endif %}
                    </p>
                    <p><span>Blood Pressure:</span> {{ record.blood_pressure }}</p>
                    <p><span>Heart Rate:</span> {{ record.heart_rate }}</p>
                    <p><span>Temperature:</span> {{ record.temperature }}</p>
                    <p><span>Weight:</span> {{ record.weight }}</p>
                    <p><span>Height:</span> {{ record.height }}</p>
                  
                    <p><span>Blood Group:</span> {{ record.blood_group }}</p>
                    <p><span>Diseases:</span> {{ record.diseases }}</p>
                    <p><span>Surgery History:</span> {{ record.surgery_history }}</p>

                    <a href="{% url 'delete_health_record' record.id %}" class="btn">
                      delete <span class="fas fa-chevron-right"></span>
                    </a>
                </div>
                
            {% endfor %}
        </div>
    </body>
    </html>
    
    <section class="services" id="services">
     <center><span style="font-weight: bold; font-size: large">checkup made easy</span></center>
      <div class="box-container">
        <div class="box">
          <i class="fas fa-notes-medical"></i>
          <h3>health records</h3>
          <p>
            Access and manage your health records easily. 
          </p>
          <a href="{% url 'add_health_record' %}" class="btn">
            add records <span class="fas fa-chevron-right"></span>
          </a>
        </div>
    
        <div class="box">
          <i class="fas fa-ambulance"></i>
          <h3>Health Geo</h3>
          <p>
            Locate health services nearby quickly. 
          </p>
          <a href="{% url 'geo_mapping' %}" class="btn">
            locate facility <span class="fas fa-chevron-right"></span>
          </a>
        </div>
    
        <div class="box">
          <i class="fas fa-user-md"></i>
          <h3>Expert AI doctors</h3>
          <p>
            Consult with AI-powered expert doctors. 
          </p>
          <a href="{% url 'ai_doctor' %}" class="btn">
            get diognised <span class="fas fa-chevron-right"></span>
          </a>
        </div>
    
        <div class="box">
          <i class="fas fa-pills"></i>
          <h3>health tracker</h3>
          <p>
            Get recommendations for your medicines. 
          </p>
          <a href="{% url 'medicine' %}" class="btn">
            track your health <span class="fas fa-chevron-right"></span>
          </a>
        </div>
      </div>
    </section>


<section class="home" id="home">
 
    
</section>


    
<!DOCTYPE html> 
<html lang="en"> 

<head> 

<!-- Font Awesome CSS CDN -->
<link rel="stylesheet" href= 
"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
    integrity= 
"sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
  crossorigin="anonymous" referrerpolicy="no-referrer" /> 
<link rel="stylesheet" href="/style2.css"> 
</head> 

<body> 
<div class="app" style="background-color: #07181f; width: auto; margin-left: 20px; margin-right: 20px;"> 
  <h1>health tracker</h1>
  <div class="inputs"> 
    <div> 
      <label for="water">  
        Water Intake (in ml) 
      </label> 
      <input id="water" type="number"> 
    </div> 
    <div> 
      <label for="exercise"> 
        Exercise Duration (in min) 
      </label> 
      <input id="exercise" type="number"> 
    </div> 
    <div> 
      <label for="bloodsugerlevel"> 
        Blood Sugar Level (in mg/dL) 
      </label> 
      <input id="bloodsugerlevel" type="number"> 
    </div> 
  </div> 
  <button id="submit">Submit</button> 
  <div id="editSection" class="hidden"> 
    <button id="cancelEdit" onclick="cancelEdit()"> 
      Cancel 
    </button> 
    <button id="updateEntry" onclick="editRow()"> 
      Update 
    </button> 
  </div> 
  <table> 
    <thead> 
      <tr> 
        <th>Date</th> 
        <th>Water Intake <br> (in ml)</th> 
        <th>Exercise Duration <br> (in min)</th> 
        <th>Blood Sugar Level <br> (in mg/dL)</th> 
        <th>Edit</th> 
        <th>Delete</th> 
      </tr> 
    </thead> 
    <tbody id="output"> 
    </tbody> 
  </table> 
</div> 




from django.shortcuts import render

from .models import *
from django.shortcuts import render
from django.contrib.auth import authenticate, login
from django.contrib import messages
from .forms import RegistrationForm
from django.contrib.auth import logout
from django.shortcuts import redirect


def recommend_exercise_and_water(user):

    health_record = HealthRecord.objects.filter(patient=user).latest('record_date')

    recommendations = {
        'exercise_duration': 30,  # Default recommendation
        'water_intake': 2.0  # Default recommendation in liters
    }

    # Adjust recommendations based on health conditions
    if health_record.diseases == 'Hypertension':
        recommendations['exercise_duration'] = 20  # Moderate exercise
        recommendations['water_intake'] = 2.5  # Increased water intake

    if health_record.diseases == 'Diabetes':
        recommendations['exercise_duration'] = 30  # Regular exercise
        recommendations['water_intake'] = 3.0  # Increased water intake

    if health_record.diseases == 'None':
        recommendations['exercise_duration'] = 45  # More intensive exercise
        recommendations['water_intake'] = 2.0  # Standard water intake

    # Further customizations based on other fields like weight, height, temperature, etc.
    if health_record.weight and health_record.height:
        bmi = health_record.weight / ((health_record.height / 100) ** 2)
        if bmi > 25:  # Overweight
            recommendations['exercise_duration'] += 15  # Additional exercise time

    return recommendations

    
from django.shortcuts import render
from django.contrib.auth.decorators import login_required


def logout_view(request):
    logout(request)
   
    return redirect('login')  # Replace 'home' with the name of your home URL pattern.

def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        if username and password:  # Check if both username and password are provided
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
            
                return redirect('home')  # Assuming you have a 'success' URL name defined in your urls.py
            else:
               
                messages.error(request, 'Invalid username or password.')
        else:
            # Return an error message if either username or password is missing
            messages.error(request, 'Please provide both username and password.')
    return render(request, 'login.html')  # Assuming you have a login.html template in your templates directory



def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            form.save()
            username = form.cleaned_data.get('username')
            messages.success(request, f'Account created for {username}!')
            
            # Authenticate the user
            new_user = authenticate(username=form.cleaned_data['username'],
                                    password=form.cleaned_data['password1'])
            if new_user is not None:
                login(request, new_user)  # Log in the user
                return redirect('login')  # Redirect to the home page after successful registration
            
    else:
        form = RegistrationForm()
    return render(request, 'reg.html', {'form': form})




from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .forms import HealthRecordForm
from .models import HealthRecord, Patient
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import HealthRecord, ExerciseTracker
from .forms import HealthRecordForm, ExerciseTrackerForm

def home(request):
    user = request.user
    recommendations = recommend_exercise_and_water(user)
    records = HealthRecord.objects.filter(patient=request.user)
    recods_count = HealthRecord.objects.count()
    context = {
        'records': records,
        'recods_count': recods_count,
        'recommendations': recommendations
    }
    return render(request, 'index.html', context)

def ai_doctor(request):
    return render(request, 'doc.html')


def exercise_tracker_view(request):
    if request.method == 'POST':
        form = ExerciseTrackerForm(request.POST)
        if form.is_valid():
            exercise = form.save(commit=False)
            exercise.user = request.user
            exercise.save()
            return redirect('home')
    else:
        form = ExerciseTrackerForm()
    return render(request, 'exercise_tracker_form.html', {'form': form})


def add_health_record(request):
    if request.method == 'POST':
        form = HealthRecordForm(request.POST)
        if form.is_valid():
            health_record = form.save(commit=False)
            health_record.patient = request.user.patient_profile
            health_record.save()
            return redirect('health_record_list')
    else:
        form = HealthRecordForm()
    return render(request, 'add_recod.html', {'form': form})



from django.shortcuts import render
from .models import HealthRecord



def geo_mapping(request):
    return render(request, 'geo.html')


def analyze_health_trend(user):
    # Fetch the last 5 health records of the user
    health_records = HealthRecord.objects.filter(patient=user).order_by('-record_date')[:5]

    if len(health_records) < 5:
        return {"error": "Insufficient data for trend analysis."}

    # Initialize lists to store metrics
    heart_rates = []
    blood_pressures = []
    weights = []

    # Extract relevant metrics and ensure they are numeric
    for record in health_records:
        try:
            heart_rates.append(int(record.heart_rate))
        except (ValueError, TypeError):
            pass

        try:
            blood_pressures.append(int(record.blood_pressure))
        except (ValueError, TypeError):
            pass

        try:
            weights.append(float(record.weight))
        except (ValueError, TypeError):
            pass

    if not heart_rates or not blood_pressures or not weights:
        return {"error": "Insufficient numeric data for trend analysis."}

    # Calculate trends
    heart_rate_trend = "Increasing" if heart_rates[0] > heart_rates[-1] else "Decreasing"
    blood_pressure_trend = "Increasing" if blood_pressures[0] > blood_pressures[-1] else "Decreasing"
    weight_trend = "Increasing" if weights[0] > weights[-1] else "Decreasing"

    # Calculate averages
    avg_heart_rate = sum(heart_rates) / len(heart_rates)
    avg_blood_pressure = sum(blood_pressures) / len(blood_pressures)
    avg_weight = sum(weights) / len(weights)

    # Example output
    trend_analysis = {
        "heart_rate_trend": heart_rate_trend,
        "blood_pressure_trend": blood_pressure_trend,
        "weight_trend": weight_trend,
        "average_heart_rate": round(avg_heart_rate, 2),
        "average_blood_pressure": round(avg_blood_pressure, 2),
        "average_weight": round(avg_weight, 2)
    }

    return trend_analysis




from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from .models import HealthRecord


from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from .models import HealthRecord

@login_required
def vision(request):
    user = request.user
    trend_analysis = analyze_health_trend(user)
    
    # Get individual metrics over time for charts
    health_records = HealthRecord.objects.filter(patient=user).order_by('-record_date')[:5]
    dates = [record.record_date.strftime('%Y-%m-%d') for record in health_records]
    heart_rates = [record.heart_rate for record in health_records]
    blood_pressures = [record.blood_pressure for record in health_records]
    weights = [record.weight for record in health_records]

    # Example recommendations based on trends
    recommendations = {}
    if trend_analysis['heart_rate_trend'] == 'Increasing':
        recommendations['heart_rate'] = "Your heart rate has been increasing. Consider monitoring your physical activity levels and consult with a healthcare provider."
    elif trend_analysis['heart_rate_trend'] == 'Decreasing':
        recommendations['heart_rate'] = "Your heart rate has been decreasing. This might indicate improved cardiovascular health."
    
    if trend_analysis['blood_pressure_trend'] == 'Increasing':
        recommendations['blood_pressure'] = "Your blood pressure has been increasing. Ensure you are managing stress and consult with a healthcare provider."
    elif trend_analysis['blood_pressure_trend'] == 'Decreasing':
        recommendations['blood_pressure'] = "Your blood pressure has been decreasing. This might indicate a positive response to medication or lifestyle changes."

    if trend_analysis['weight_trend'] == 'Increasing':
        recommendations['weight'] = "Your weight has been increasing. Consider adjusting your diet and exercise routine."
    elif trend_analysis['weight_trend'] == 'Decreasing':
        recommendations['weight'] = "Your weight has been decreasing. Ensure you are maintaining a healthy diet and lifestyle."


    
    context = {
        'trend_analysis': trend_analysis,
        'dates': dates,
        'heart_rates': heart_rates,
        'blood_pressures': blood_pressures,
        'weights': weights,
        'recommendations': recommendations,
    }
    
    return render(request, 'vision.html', context)






def health_records(request):
    return render(request, 'geo.html')

def medicine(request):
    records = HealthRecord.objects.filter(patient=request.user)
    context = {
        'records': records,
       
    }
    return render(request, 'medicine.html', context)

from django.shortcuts import render, redirect

from .models import HealthRecord
from .forms import HealthRecordForm


def add_health_record(request):
    if request.method == 'POST':
        form = HealthRecordForm(request.POST)
        if form.is_valid():
            health_record = form.save(commit=False)
            health_record.patient = request.user
            health_record.save()
            return redirect('home')
    else:
        form = HealthRecordForm()
    return render(request, 'recods.html', {'form': form})

from django.shortcuts import redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import HealthRecord

@login_required
def delete_health_record(request, record_id):
    record = get_object_or_404(HealthRecord, id=record_id, patient=request.user)
    record.delete()
    return redirect('home')


# views.py













<!-- Font Awesome JS CDN -->
<script src= 
"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"
    integrity= 
"sha512-GWzVrcGlo0TxTRvz9ttioyYJ+Wwk9Ck0G81D+eO63BaqHaJ3YZX9wuqjwgfcV/MrB2PhaVX9DkYVhbFpStnqpQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer"> 
</script> 
<script src="/script2.js"></script> 
</body> 

</html>
<style>


h1 { 
background-image: linear-gradient(to right, #0ea5e9, #10b981); 
} 

h3 { 
background-image: linear-gradient(to right, #ec4899, #8b5cf6); 
} 

h1, 
h3 { 
color: transparent; 
background-clip: text; 
-webkit-background-clip: text; 
-webkit-text-fill-color: transparent; 
} 

.app { 
display: flex; 
flex-direction: column; 
justify-content: center; 
align-items: center; 
width: 650px; 
margin: 1rem auto; 
padding: 10px; 
gap: 20px; 
} 

.inputs { 
width: 100%; 
display: flex; 
justify-content: space-between; 
align-items: center; 
gap: 20px; 
height: fit-content; 
} 

.inputs>div { 
height: 100%; 
display: flex; 
justify-content: space-between; 
flex-direction: column; 
} 

label { 
font-size: 0.9rem; 
  color: white;
} 

input, 
label { 
display: block; 
} 

input { 
margin-top: 8px; 
margin-bottom: 5px; 
padding: 10px; 
font-size: large; 
background-color: #262626; 
color: white; 
border: none; 
border-radius: 5px; 
width: 100%; 
} 

input:focus-visible { 
outline: 2px solid #ec4899; 
} 

input::-webkit-outer-spin-button, 
input::-webkit-inner-spin-button { 
-webkit-appearance: none; 
margin: 0; 
} 

button{ display: block; cursor: pointer; border: none; } 

#submit { 
width: 100%; 
padding: 10px; 
margin-bottom: 10px; 
background-image: linear-gradient(to right, #ec4899, #8b5cf6); 
font-size: 1.3rem; 
border-radius: 5px; 
color: white; 
font-weight: bold; 
transition: scale 0.3s ease-in-out; 
} 

#editSection{ 
width: 100%; 
display: flex; 
gap: 25px; 
justify-content: space-between; 
} 

#editSection > button { 
width: 100%; 
padding: 10px; 
margin-bottom: 10px; 
font-size: 1.3rem; 
border-radius: 5px; 
color: white; 
font-weight: bold; 
transition: scale 0.3s ease-in-out; 
} 

#updateEntry { background-image: 
linear-gradient(to right, #ec4899, #8b5cf6); } 

#cancelEdit{ background-color: #ef4444; } 

#submit:hover, #updateEntry:hover, #cancelEdit:hover { scale: 1.02; } 

.hidden{ display: none !important; } 

.edit, .delete{ 
margin: 0 auto; 
padding: 5px 10px; 
font-size: 1.1rem; 
border-radius: 5px; 
background-color: transparent; 
color: white; 
border: 1px solid white; 
} 

.edit:hover, .delete:hover{ 
background-color: #0a0a0a; 
} 

table { 
width: 100%; 
border-collapse: collapse; 
position: relative; 
overflow: hidden; 
} 

th, 
td { 
text-align: center; 
padding: 10px; 
border: 0; 
  color: white;
} 
tr:nth-child(even) { 
background-color: #57534e; 
} 

tr:nth-child(odd) { 
background-color: #262626; 
} 

th { 
font-size: 0.9rem; 
background-color: #0a0a0a; 
} 

tbody > tr:hover{ 
background-color: #737373; 
color: black; 
} 

.delete-animation{ 
background-color: #ef4444 !important; 
animation: deleteAnimate 0.4s linear forwards; 
} 

@keyframes deleteAnimate{ 
to{ 
  transform: translateX(100%); 
} 
}

</style>
<script>
  // script.js 

const editIcon = `<i class="fas fa-edit"></i>` 

const deleteIcon = `<i class="fas fa-trash"></i>` 

function clearInputs() { 
wInput.value = ""
eInput.value = ""
bInput.value = ""
} 

function addToLocalStorage(){ 
localStorage.setItem("date", JSON.stringify(date)) 
localStorage.setItem("water", JSON.stringify(water)) 
localStorage.setItem("exercise", JSON.stringify(exercise)) 
localStorage.setItem("bloodsugar", JSON.stringify(bloodsugar)) 
} 

function activateEdit(i){ 
wInput.value = water[i] 
eInput.value = exercise[i] 
bInput.value = bloodsugar[i] 
editIndex = i 
submitButton.classList.add("hidden") 
editSection.classList.remove("hidden") 
} 

function cancelEdit() { 
clearInputs() 
editIndex = -1 
submitButton.classList.remove("hidden") 
editSection.classList.add("hidden") 
} 

function editRow(){ 
if(editIndex==-1) return
water[editIndex] = wInput.value 
exercise[editIndex] = eInput.value 
bloodsugar[editIndex] = bInput.value 
fillTable() 
addToLocalStorage() 
cancelEdit() 
} 

function deleteRow(i){ 
if(!confirm( 
`Confirm that you want to delete the entry: 
\n ${date[i]}: ${water[i]}ml, ${exercise[i]}min, 
${bloodsugar[i]}mg/dL`)) 
return
date.splice(i, 1) 
water.splice(i, 1) 
exercise.splice(i, 1) 
bloodsugar.splice(i, 1) 
document.querySelector(`#output > tr:nth-child(${i+1})`) 
.classList.add("delete-animation") 
addToLocalStorage() 
setTimeout(fillTable, 500) 
} 

function fillTable(){ 
const tbody = document.getElementById("output") 
const rows = 
  Math.max(water.length, exercise.length, bloodsugar.length) 
let html = ""
for(let i=0; i<rows; i++){ 
  let w = water[i] || "N/A"
  let e = exercise[i] || "N/A"
  let b = bloodsugar[i] || "N/A"
  let d = date[i] || "N/A"
  html+=`<tr> 
    <td>${d}</td> 
    <td>${w}</td> 
    <td>${e}</td> 
    <td>${b}</td> 
    <td> 
      <button onclick="activateEdit(${i})"
          class="edit">${editIcon} 
      </button> 
    </td> 
    <td> 
      <button 
        onclick="deleteRow(${i})"
        class="delete">${deleteIcon} 
      </button> 
    </td> 
  </tr>`		 
} 
tbody.innerHTML = html; 
} 

let editIndex = -1; 

let date = 
JSON.parse(localStorage.getItem("date")) || [] 
let water = 
JSON.parse(localStorage.getItem("water")) || [] 
let exercise = 
JSON.parse(localStorage.getItem("exercise")) || [] 
let bloodsugar = 
JSON.parse(localStorage.getItem("bloodsugar")) || [] 

const wInput = document.getElementById("water") 
const eInput = document.getElementById("exercise") 
const bInput = document.getElementById("bloodsugerlevel") 

const submitButton = document.getElementById("submit") 
const editSection = document.getElementById("editSection") 

fillTable() 

submitButton.addEventListener("click", ()=>{ 
const w = wInput.value || null; 
const e = eInput.value || null; 
const b = bInput.value || null; 
if(w===null || e===null || b===null) { 
  alert("Please enter all the fields.") 
  return
} 
const d = new Date().toLocaleDateString() 
date = [d, ...date] 
water = [w, ...water] 
exercise = [e, ...exercise] 
bloodsugar = [b, ...bloodsugar] 
// date.push(d) 
// water.push(w) 
// exercise.push(e) 
// bloodsugar.push(b) 
clearInputs() 
fillTable() 
addToLocalStorage() 
})

</script>
  </div>
<section class="icons-container">
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Health Monitor</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        text-align: center;
        margin: 0;
        padding: 0;
        background-color: #f0f0f0;
      }
      h1 {
        margin-top: 20px;
      }
      video {
        display: block;
        margin: 20px auto;
        width: 320px;
        height: 240px;
        border: 2px solid #ccc;
      }
      button {
        margin: 20px auto;
        padding: 10px 20px;
        font-size: 16px;
      }
      #result {
        font-size: 18px;
        margin-top: 20px;
      }
      canvas {
        display: block;
        margin: 20px auto;
        border: 2px solid #ccc;
        background-color: #000;
      }
      .warning {
        color: red;
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <!-- <h1>Heart Rate Monitor</h1> -->
    <video id="video" autoplay></video>
    <button id="startHeartButton">Start Monitoring Heart Rate</button>
    <div id="heartResult"></div>
  
    <!-- <h1>Respiratory Rate Monitor</h1> -->
    <button id="startRespiratoryButton">Start Monitoring Respiratory Rate</button>
    <button id="stopRespiratoryButton" style="display: none;">Stop Monitoring</button>
    <canvas id="waveform" width="300" height="200"></canvas>
    <div id="respiratoryResult">Press Start to monitor respiratory rate</div>
    <div id="respiratoryWarningMessage" class="warning" style="display: none;">Warning: High Respiratory Rate Detected!</div>
    <div id="respiratoryRecommendation"></div>
  
    <script>
      // Heart Rate Monitor
      document.getElementById('startHeartButton').addEventListener('click', async () => {
        const video = document.getElementById('video');
        const resultDiv = document.getElementById('heartResult');
  
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ video: true });
          video.srcObject = stream;
  
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          const width = 320;
          const height = 240;
          canvas.width = width;
          canvas.height = height;
  
          let frameCount = 0;
          let sum = 0;
          let lastAverage = 0;
          const frameRate = 30; // frames per second
  
          function analyzeFrame() {
            context.drawImage(video, 0, 0, width, height);
            const imageData = context.getImageData(0, 0, width, height);
            const data = imageData.data;
  
            let averageColor = 0;
            for (let i = 0; i < data.length; i += 4) {
              averageColor += (data[i] + data[i + 1] + data[i + 2]) / 3;
            }
            averageColor /= (data.length / 4);
  
            sum += Math.abs(averageColor - lastAverage);
            lastAverage = averageColor;
            frameCount++;
  
            if (frameCount === frameRate) {
              const bpm = (sum / frameRate) * 60;
              resultDiv.innerText = `Estimated Heart Rate: ${Math.round(bpm)} BPM`;
              frameCount = 0;
              sum = 0;
            }
  
            requestAnimationFrame(analyzeFrame);
          }
  
          requestAnimationFrame(analyzeFrame);
        } catch (error) {
          console.error("Error accessing camera: ", error);
          resultDiv.innerText = "Error accessing camera";
        }
      });
  
      // Respiratory Rate Monitor
      let isMonitoring = false;
      let audioContext;
      let analyser;
      let dataArray;
      let breathRates = [];
      let highRateWarning = false;
      let recommendationTimeout;
  
      const beepSound = new Audio('https://www.soundjay.com/button/beep-07.wav');
  
      document.getElementById('startRespiratoryButton').addEventListener('click', async () => {
        const resultDiv = document.getElementById('respiratoryResult');
        const canvas = document.getElementById('waveform');
        const warningMessage = document.getElementById('respiratoryWarningMessage');
        const recommendationDiv = document.getElementById('respiratoryRecommendation');
        const stopButton = document.getElementById('stopRespiratoryButton');
  
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          audioContext = new (window.AudioContext || window.webkitAudioContext)();
          analyser = audioContext.createAnalyser();
          const source = audioContext.createMediaStreamSource(stream);
          source.connect(analyser);
  
          analyser.fftSize = 256;
          const bufferLength = analyser.frequencyBinCount;
          dataArray = new Uint8Array(bufferLength);
  
          let breathTimestamps = [];
          let lastBreathTime = 0;
  
          function draw() {
            analyser.getByteTimeDomainData(dataArray);
  
            const canvasCtx = canvas.getContext('2d');
            canvasCtx.fillStyle = 'black';
            canvasCtx.fillRect(0, 0, canvas.width, canvas.height);
  
            canvasCtx.lineWidth = 2;
            canvasCtx.strokeStyle = 'lime';
  
            canvasCtx.beginPath();
            const sliceWidth = canvas.width / bufferLength;
            let x = 0;
  
            let breathDetected = false;
  
            for (let i = 0; i < bufferLength; i++) {
              const v = dataArray[i] / 128.0;
              const y = (v * canvas.height) / 2;
  
              if (i === 0) {
                canvasCtx.moveTo(x, y);
              } else {
                canvasCtx.lineTo(x, y);
              }
  
              // Detect breath based on amplitude threshold
              if (v > 1.5 && !breathDetected) {
                const currentTime = audioContext.currentTime;
                if (currentTime - lastBreathTime > 1) {
                  breathTimestamps.push(currentTime);
                  lastBreathTime = currentTime;
                  breathDetected = true;
                }
              }
  
              x += sliceWidth;
            }
  
            canvasCtx.lineTo(canvas.width, canvas.height / 2);
            canvasCtx.stroke();
  
            // Calculate respiratory rate
            breathTimestamps = breathTimestamps.filter(ts => audioContext.currentTime - ts < 60);
            const breathRate = breathTimestamps.length;
            resultDiv.innerText = `Respiratory Rate: ${breathRate} breaths per minute`;
  
            // Update breath rates array
            breathRates.push(breathRate);
            if (breathRates.length > 10) {
              breathRates.shift(); // Keep the last 10 rates
            }
  
            const averageBreathRate = breathRates.reduce((a, b) => a + b, 0) / breathRates.length;
  
            // Check for high respiratory rate
            if (averageBreathRate > 20) {
              if (!highRateWarning) {
                highRateWarning = true;
                warningMessage.style.display = 'block';
                beepSound.play();
  
                recommendationDiv.innerText = "Recommendation: Take a moment to rest. If the problem persists, consider contacting a healthcare professional.";
                recommendationDiv.style.display = 'block';
  
                // Automatically hide warning and recommendation after 10 seconds
                recommendationTimeout = setTimeout(() => {
                  warningMessage.style.display = 'none';
                  recommendationDiv.style.display = 'none';
                  highRateWarning = false;
                }, 10000);
              }
            } else {
              if (highRateWarning) {
                warningMessage.style.display = 'none';
                recommendationDiv.style.display = 'none';
                highRateWarning = false;
                clearTimeout(recommendationTimeout);
              }
            }
  
            if (isMonitoring) {
              requestAnimationFrame(draw);
            }
          }
  
          isMonitoring = true;
          draw();
  
          stopButton.style.display = 'inline';
          document.getElementById('startRespiratoryButton').style.display = 'none';
        } catch (error) {
          console.error("Error accessing microphone: ", error);
          resultDiv.innerText = "Error accessing microphone";
        }
      });
  
      document.getElementById('stopRespiratoryButton').addEventListener('click', () => {
        isMonitoring = false;
        clearTimeout(recommendationTimeout);
        audioContext.close().then(() => {
          console.log("Audio context closed");
        }).catch((error) => {
          console.error("Error closing audio context: ", error);
        });
  
        const resultDiv = document.getElementById('respiratoryResult');
        const stopButton = document.getElementById('stopRespiratoryButton');
        const startButton = document.getElementById('startRespiratoryButton');
        const warningMessage = document.getElementById('respiratoryWarningMessage');
        const recommendationDiv = document.getElementById('respiratoryRecommendation');
  
        resultDiv.innerText = "Monitoring stopped";
        stopButton.style.display = 'none';
        startButton.style.display = 'inline';
        warningMessage.style.display = 'none';
        recommendationDiv.style.display = 'none';
      });
    </script>
  </body>
  </html>
  
</section>
{% include 'float.html' %}